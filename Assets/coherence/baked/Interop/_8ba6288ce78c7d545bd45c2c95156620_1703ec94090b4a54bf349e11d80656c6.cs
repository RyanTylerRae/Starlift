// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.Brook;
    using Coherence.Entities;
    using Coherence.Log;
    using Coherence.Core;
    using Coherence.Connection;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using UnityEngine;

    public struct _8ba6288ce78c7d545bd45c2c95156620_1703ec94090b4a54bf349e11d80656c6 : IEntityCommand
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public ByteArray data;
            [FieldOffset(16)]
            public System.UInt32 dataId;
            [FieldOffset(20)]
            public System.Byte index;
            [FieldOffset(21)]
            public System.Byte total;
            [FieldOffset(22)]
            public System.UInt32 senderId;
            [FieldOffset(26)]
            public System.Int64 sendTime;
        }

        public static unsafe _8ba6288ce78c7d545bd45c2c95156620_1703ec94090b4a54bf349e11d80656c6 FromInterop(System.IntPtr data, System.Int32 dataSize) 
        {
            if (dataSize != 34) {
                throw new System.Exception($"Given data size is not equal to the struct size. ({dataSize} != 34) " +
                    "for command with ID 10");
            }

            var orig = new _8ba6288ce78c7d545bd45c2c95156620_1703ec94090b4a54bf349e11d80656c6();
            var comp = (Interop*)data;
            orig.data = new byte[comp->data.Length]; Marshal.Copy((System.IntPtr)comp->data.Data, orig.data, 0, (int)comp->data.Length);
            orig.dataId = comp->dataId;
            orig.index = comp->index;
            orig.total = comp->total;
            orig.senderId = comp->senderId;
            orig.sendTime = comp->sendTime;
            return orig;
        }

        public System.Byte[] data;
        public System.UInt32 dataId;
        public System.Byte index;
        public System.Byte total;
        public System.UInt32 senderId;
        public System.Int64 sendTime;
        
        public Entity Entity { get; set; }
        public Coherence.ChannelID ChannelID { get; set; }
        public MessageTarget Target { get; set; }
        public MessageTarget Routing { get; set; }
        public uint SenderParticipant { get; set; }
        public ClientID SenderClientID { get; set; }
        public long Frame { get; set; }
        public uint GetComponentType() => 10;
        public bool UsesMeta { get; set; }

        public IEntityMessage Clone()
        {
            // This is a struct, so we can safely return
            // a struct copy.
            return this;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToAbsoluteEntity(Entity, false, out var absoluteEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = absoluteEntity;
            return IEntityMapper.Error.None;
        }
        
        public IEntityMapper.Error MapToRelative(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToRelativeEntity(Entity, false, out var relativeEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = relativeEntity;
            return IEntityMapper.Error.None;
        }

        public HashSet<Entity> GetEntityRefs() {
            return default;
        }

        public void NullEntityRefs(Entity entity) {
        }
        
        public _8ba6288ce78c7d545bd45c2c95156620_1703ec94090b4a54bf349e11d80656c6(
            Entity entity,
            System.Byte[] data,
            System.UInt32 dataId,
            System.Byte index,
            System.Byte total,
            System.UInt32 senderId,
            System.Int64 sendTime
        )
        {
            Entity = entity;
            ChannelID = Coherence.ChannelID.Default;
            Target = default;
            Routing = MessageTarget.All;
            SenderParticipant = 0;
            SenderClientID = default;
            Frame = 0;
            UsesMeta = false;

            this.data = data; 
            this.dataId = dataId; 
            this.index = index; 
            this.total = total; 
            this.senderId = senderId; 
            this.sendTime = sendTime; 
        }
        
        public static void Serialize(_8ba6288ce78c7d545bd45c2c95156620_1703ec94090b4a54bf349e11d80656c6 commandData, IOutProtocolBitStream bitStream)
        {
            bitStream.WriteBytesList(commandData.data);
            bitStream.WriteUIntegerRange(commandData.dataId, 32, 0);
            bitStream.WriteByte(commandData.index);
            bitStream.WriteByte(commandData.total);
            bitStream.WriteUIntegerRange(commandData.senderId, 32, 0);
            bitStream.WriteLong(commandData.sendTime);
        }
        
        public static _8ba6288ce78c7d545bd45c2c95156620_1703ec94090b4a54bf349e11d80656c6 Deserialize(IInProtocolBitStream bitStream, Entity entity, MessageTarget target)
        {
            var datadata = bitStream.ReadBytesList();
            var datadataId = bitStream.ReadUIntegerRange(32, 0);
            var dataindex = bitStream.ReadByte();
            var datatotal = bitStream.ReadByte();
            var datasenderId = bitStream.ReadUIntegerRange(32, 0);
            var datasendTime = bitStream.ReadLong();
    
            return new _8ba6288ce78c7d545bd45c2c95156620_1703ec94090b4a54bf349e11d80656c6()
            {
                Entity = entity,
                Routing = target,
                Target = target,
                data = datadata,
                dataId = datadataId,
                index = dataindex,
                total = datatotal,
                senderId = datasenderId,
                sendTime = datasendTime
            };   
        }
    }

}
